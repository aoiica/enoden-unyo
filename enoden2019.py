# -*- coding: utf8 -*-

import sys
import re
import tkinter as tk
#import threading
#import concurrent.futures
import datetime
#import drew
#from apscheduler.schedulers.blocking import BlockingScheduler
#scdl = BlockingScheduler()
import today


# <メインの変数たちと外部との接点>
# 運用メインの変数
unyouDnmList = [0,    1, 2, 3, 4, 5, 6,    7, 8, 9]
# 解説: 不明なのは運用番号0、1-6はいつもの、7はGWのために空き、8は極楽寺で休み、9は江ノ島で休み
# 段落としに楽に変更できるように
roku = 6
nana = 7
honsen = 6
kmkrPltf = 3
# 運用バケツ　Fがついていようとなかろうと+だろうと-だろうと、とりあえず突っ込む。あとでよしなにする。
un1 = today.un1
un2 = today.un2
un3 = today.un3
un4 = today.un4
un5 = today.un5
un6 = today.un6

un7 = today.un7
# 休みバケツ
yasumi = today.yasumi
# なうえの
naueno = today.naueno


# <雑なデータをととのえてクラスにぶっこむ>
# 車両のクラス: ぶっちゃけいらない
class Car():
    global unyouDnmList
    def __init__(self, name, unyounum=0, shisen=0):
        self.name = name
        self.kname = int(name) + 50
        self.unyounum = unyounum
        self.shisen = shisen

    def addUnoyunum(self, supUnyounum):
        self.unyounum = supUnyounum

    def addHonshisen(self, supHonshisen):
        self.shisen = supShisen

    def findUnyounum(self):
        return self.unyounum

    def findWhere(self):
        return unyouDnmList[self.unyounum]

# 車両のインスタンスを作っておく
F305 = Car(name=305)
F1002 = Car(name=1002)
F1101 = Car(name=1101)
F1201 = Car(name=1201)
F1501 = Car(name=1501)
F1502 = Car(name=1502)
F2001 = Car(name=2001)
F2002 = Car(name=2002)
F2003 = Car(name=2003)
F10 = Car(name=10)
F21 = Car(name=21)
F22 = Car(name=22)
F501 = Car(name=501)
F502 = Car(name=502)

cars = [305, 1001, 1002, 1101, 1201, 1501, 1502, 2001, 2002, 2003, 10, 21, 22, 501, 502]

# 運用バケツから車両インスタンスに運用番号を流し込む
def fromBucketToUnyounum():
    carDict = {i: re.findall('\d+', eval('un' + str(i))) for i in range(1, honsen+1)}

    for i, nameList in carDict.items():
        for name in nameList:
            if name in cars:
                eval('F' + str(name)).addUnoyunum(i)
# 休みバケツから車両インスタンスに8番と支線番号を流し込む
def fromBucketToYasumi():
    for name in re.findall('\d+', yasumi):
        if name in cars:
            eval('F' + str(name)).addUnoyunum(8)



# <時刻を変化させる処理>
# 現在時刻

ddn = datetime.datetime.now()
nowHour = ddn.hour
nowMin = ddn.minute
def nowHourDef():
    global nowHour
    nowHour = ddn.hour
def nowMinDef():
    global nowMin
    nowMin = ddn.minute
'''
# テスト
ddn = 2100
nowHour = 21
nowMin = 10
def nowHourDef():
    global nowHour
    nowHour = nowHour
def nowMinDef():
    global nowMin
    nowMin = nowMin
'''
#　時刻変化処理
stateDict6 = {
    7:[0,   -24, -36, 24, 12, 0, -12,   27, 27, 12],
    8:[0,   -36, 24, 12, 0, -12, -24,   27, 27, 12],
    9:[0,   24, 12, 0, -12, -24, -36,   27, 27, 12],
    10:[0,   12, 0, -12, -24, -36, 24,   27, 27, 12],
    11:[0,   0, -12, -24, -36, 24, 12,   27, 27, 12],
    12:[0,   -12, -24, -36, 24, 12, 0,   27, 27, 12],
    13:[0,   -24, -36, 24, 12, 0, -12,   27, 27, 12],
    14:[0,   -36, 24, 12, 0, -12, -24,   27, 27, 12],
    15:[0,   24, 12, 0, -12, -24, -36,   27, 27, 12],
    16:[0,   12, 0, -12, -24, -36, 24,   27, 27, 12],
    17:[0,   0, -12, -24, -36, 24, 12,   27, 27, 12],
    18:[0,   -12, -24, -36, 24, 12, 0,   27, 27, 12],
    19:[0,   -24, -36, 24, 12, 0, -12,   27, 27, 12],
    20:[0,   -36, 24, 12, 0, -12, -24,   27, 27, 12],
    21:[0,   24, 12, 0, -12, -24, -36,   27, 27, 12],
    }

stateDict7 = {
    7:[4,   -24, -36, 24, 12, 0, -12,   27, 27, 12],
    8:[4,   -36, 24, 12, 0, -12, -24,   27, 27, 12],
    9:[4,   24, 12, 0, -12, -24, -36,   27, 27, 12],
    10:[4,   24, 12, 0, -24, -36, 36, -12,   27, 12],
    11:[4,   0, -12, -24, 36, 24, 12, -36,   27, 12],
    12:[4,   -24, -36, 36, 12, 0, -12, 24,   27, 12],
    13:[4,   36, 24, 12, -12, -24, -36, 0,   27, 12],
    14:[4,   12, 0, -12, -36, 36, 24, -24,   27, 12],
    15:[4,   -12, -24, -36, 24, 12, 0, 36,   27, 12],
    16:[4,   -36, 36, 24, 0, -12, -24, 12,   27, 12],
    17:[4,   24, 12, 0, -24, -36, 36, -12,   27, 12],
    18:[4,   0, -12, -24, 36, 24, 12, -36,   27, 12],
    19:[4,   -24, -36, 24, 12, 0, -12,   27, 27, 12],
    20:[4,   -36, 24, 12, 0, -12, -24,   27, 27, 12],
    21:[4,   24, 12, 0, -12, -24, -36,   27, 27, 12],
    }

every_min_dict = {510: [1, -27, 12, 12, -12, -27, -24, 27, 27, 12], 511: [1, -27, 12, 204, -12, -27, -24, 27, 27, 12], 512: [1, -27, 12, 204, -12, -27, -24, 27, 27, 12], 513: [1, -27, 12, 204, -12, -27, -24, 27, 27, 12], 514: [1, -27, 12, 204, -12, -27, -24, 27, 27, 12], 515: [1, -27, 12, 204, -12, -27, -24, 27, 27, 12], 516: [1, -27, 12, 204, 204, -27, -24, 27, 27, 12], 517: [1, -27, 12, 204, 204, -27, -24, 27, 27, 12], 518: [1, -27, 12, 204, 204, -27, -24, 27, 27, 12], 519: [1, -27, 12, 204, -6, -27, -24, 27, 27, 12], 520: [1, -27, 12, 204, 204, -27, -24, 27, 27, 12], 521: [1, -27, 12, 204, 204, -27, -24, 27, 27, 12], 522: [1, -27, 12, 24, 204, -27, -24, 27, 27, 12], 523: [1, -27, 12, 204, 204, -27, -24, 27, 27, 12], 524: [1, -27, 204, 204, 0, -27, 204, 27, 27, 12], 525: [1, -27, 204, 204, 0, -27, 204, 27, 27, 12], 526: [1, -27, 204, 30, 0, -27, 204, 27, 27, 12], 527: [1, -27, 204, 204, 0, -27, 204, 27, 27, 12], 528: [1, -27, 204, 204, 0, -27, 204, 27, 27, 12], 529: [1, -27, 204, 204, 0, -27, 204, 27, 27, 12], 530: [1, -27, 204, 204, 0, -27, 204, 27, 27, 12], 531: [1, -27, 204, 36, 0, -27, 204, 27, 27, 12], 532: [1, -27, 204, -36, 0, -27, 204, 27, 27, 12], 533: [1, -27, 204, -36, 0, -27, 204, 27, 27, 12], 534: [1, -27, 204, -36, 0, -27, 204, 27, 27, 12], 535: [1, -27, 204, -36, 0, -27, 204, 27, 27, 12], 536: [1, -27, 24, -36, 0, -27, -12, 27, 27, 12], 537: [1, -27, 204, -36, 204, -27, 204, 27, 27, 12], 538: [1, -27, 204, -36, 204, -27, 204, 27, 27, 12], 539: [1, -27, 204, -36, 204, -27, 204, 27, 27, 12], 540: [1, -27, 204, -36, 204, -27, 204, 27, 27, 12], 541: [1, -27, 30, -36, 6, -27, -6, 27, 27, 12], 542: [1, -27, 204, -36, 204, -27, 204, 27, 27, 12], 543: [1, -27, 204, -36, 204, -27, 204, 27, 27, 12], 544: [1, 204, 204, -36, 204, -27, 204, 27, 27, 12], 545: [1, 204, 36, -36, 204, -27, 0, 27, 27, 12], 546: [1, 204, -36, -36, 204, -27, 0, 27, 27, 12], 547: [1, -24, -36, -36, 12, -27, 0, 27, 27, 12], 548: [1, 204, -36, -36, 204, -27, 0, 27, 27, 12], 549: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 550: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 551: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 552: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 553: [1, 204, -30, -36, 204, -27, 0, 27, 27, 12], 554: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 555: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 556: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 557: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 558: [1, 204, 204, -36, 204, -27, 0, 27, 27, 12], 559: [1, 204, -24, -36, 204, -27, 0, 27, 27, 12], 600: [1, -12, 204, 204, 24, -27, 0, 27, 27, 12], 601: [1, 204, 204, 204, 204, -27, 204, 27, 27, 12], 602: [1, 204, 204, 204, 204, -27, 204, 27, 27, 12], 603: [1, 204, 204, 204, 204, -27, 204, 27, 27, 12], 604: [1, 204, 204, -30, 204, -27, 204, 27, 27, 12], 605: [1, -6, 204, 204, 30, -27, 6, 27, 27, 12], 606: [1, 204, 204, 204, 204, -27, 204, 27, 27, 12], 607: [1, 204, 204, 204, 204, -27, 204, 27, 27, 12], 608: [1, 204, 204, 204, 204, -27, 204, 27, 27, 12], 609: [1, 0, 204, 204, 36, -27, 204, 27, 27, 12], 610: [1, 0, 204, -24, -36, 204, 204, 27, 27, 12], 611: [1, 0, 204, 204, -36, 204, 12, 27, 27, 12], 612: [1, 0, -12, 204, 204, 24, 204, 27, 27, 12], 613: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 614: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 615: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 616: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 617: [1, 6, -6, 204, -30, 30, 204, 27, 27, 12], 618: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 619: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 620: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 621: [1, 204, 0, 204, 204, 204, 204, 27, 27, 12], 622: [1, 204, 0, 204, 204, 36, 204, 27, 27, 12], 623: [1, 12, 0, 204, -24, -36, 24, 27, 27, 12], 624: [1, 204, 0, -12, 204, -36, 204, 27, 27, 12], 625: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 626: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 627: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 628: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 629: [1, 204, 6, -6, 204, -30, 30, 27, 27, 12], 630: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 631: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 632: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 633: [1, 204, 204, 0, 204, 204, 36, 27, 27, 12], 634: [1, 204, 204, 0, 204, 204, -36, 27, 27, 12], 635: [1, 24, 12, 0, 204, -24, -36, 27, 27, 12], 636: [1, 204, 204, 0, -12, 204, -36, 27, 27, 12], 637: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 638: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 639: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 640: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 641: [1, 30, 204, 6, -6, 204, -30, 27, 27, 12], 642: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 643: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 644: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 645: [1, 36, 204, 204, 0, 204, 204, 27, 27, 12], 646: [1, -36, 204, 204, 0, 204, 204, 27, 27, 12], 647: [1, -36, 24, 12, 0, 204, -24, 27, 27, 12], 648: [1, -36, 204, 204, 0, -12, 204, 27, 27, 12], 649: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 650: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 651: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 652: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 653: [1, -30, 30, 204, 6, -6, 204, 27, 27, 12], 654: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 655: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 656: [1, 204, 204, 204, 204, 204, 204, 27, 27, 12], 657: [1, 204, 36, 204, 204, 0, 204, 27, 27, 12], 658: [1, 204, 204, 204, 204, 0, 204, 27, 27, 12], 659: [1, -24, 204, 24, 12, 0, 204, 27, 27, 12],

2100: [2, 204, 204, 0, -12, 204, -36, 27, 27, 12], 2101: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2102: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2103: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2104: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2105: [2, 30, 204, 6, -6, 204, -30, 27, 27, 12], 2106: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2107: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2108: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2109: [2, 36, 204, 204, 0, 204, 204, 27, 27, 12], 2110: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2111: [2, 204, 24, 12, 204, 204, -24, 27, 27, 12], 2112: [2, -36, 204, 204, 0, -12, 204, 27, 27, 12], 2113: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2114: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2115: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2116: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2117: [2, -30, 30, 204, 6, -6, 204, 27, 27, 12], 2118: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2119: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2120: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2121: [2, 204, 36, 204, 204, 0, 204, 27, 27, 12], 2122: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2123: [2, -24, 204, 24, 12, 204, 204, 27, 27, 12], 2124: [2, 204, -36, 204, 204, 0, -12, 27, 27, 12], 2125: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2126: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2127: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2128: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2129: [2, 204, -30, 30, 204, 6, -6, 27, 27, 12], 2130: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2131: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2132: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2133: [2, 204, 204, 36, 204, 204, 0, 27, 27, 12], 2134: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2135: [2, 204, 204, 204, 24, 204, 204, 27, 27, 12], 2136: [2, 204, -24, -36, 204, 12, 204, 27, 27, 12], 2137: [2, -12, 204, 204, 204, 204, 0, 27, 27, 12], 2138: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2139: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2140: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2141: [2, 204, 204, -30, 30, 204, 204, 27, 27, 12], 2142: [2, -6, 204, 204, 204, 204, 6, 27, 27, 12], 2143: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2144: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2145: [2, 204, 204, 204, 36, 204, 204, 27, 27, 12], 2146: [2, 0, 204, 204, 204, 204, 204, 27, 27, 12], 2147: [2, 204, 204, 204, 204, 24, 204, 27, 27, 12], 2148: [2, 204, 204, -24, -36, 204, 12, 27, 27, 12], 2149: [2, 0, -12, 204, 204, 204, 204, 27, 27, 12], 2150: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2151: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2152: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2153: [2, 204, 204, 204, -30, 30, 204, 27, 27, 12], 2154: [2, 6, -6, 204, 204, 204, 204, 27, 27, 12], 2155: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2156: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2157: [2, 204, 204, 204, 204, 36, 204, 27, 27, 12], 2158: [2, 204, 0, 204, 204, 204, 204, 27, 27, 12], 2159: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2200: [2, 204, 204, -12, 204, 204, 204, 27, 27, 12], 2201: [2, 12, 204, 204, -24, 204, 24, 27, 27, 12], 2202: [2, 204, 0, 204, 204, -36, 204, 27, 27, 12], 2203: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2204: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2205: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2206: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2207: [2, 204, 6, 204, 204, -30, 30, 27, 27, 12], 2208: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2209: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2210: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2211: [2, 204, 204, 204, 204, 204, 36, 27, 27, 12], 2212: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2213: [2, 24, 12, 204, 204, -24, 204, 27, 27, 12], 2214: [2, 204, 204, 204, -12, 204, 204, 27, 27, 12], 2215: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2216: [2, 204, 204, 204, 204, 204, -36, 27, 27, 12], 2217: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2218: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2219: [2, 204, 204, 204, -6, 204, 204, 27, 27, 12], 2220: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2221: [2, 204, 204, 204, 204, 204, -30, 27, 27, 12], 2222: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2223: [2, 204, 204, 204, 0, 204, 204, 27, 27, 12], 2224: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2225: [2, 204, 204, 204, 204, -12, 204, 27, 27, 12], 2226: [2, 204, 24, 204, 0, 204, 204, 27, 27, 12], 2227: [2, 204, 204, 204, 204, 204, -24, 27, 27, 12], 2228: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2229: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2230: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2231: [2, 204, 30, 204, 6, 204, 204, 27, 27, 12], 2232: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2233: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2234: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2235: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2236: [2, 204, 36, 204, 204, 204, 204, 27, 27, 12], 2237: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2238: [2, 204, 204, 204, 12, 204, 204, 27, 27, 12], 2239: [2, 204, 204, 204, 204, 204, -12, 27, 27, 12], 2240: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2241: [2, 204, -36, 204, 204, 204, 204, 27, 27, 12], 2242: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2243: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2244: [2, 204, 204, 204, 204, 204, -6, 27, 27, 12], 2245: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2246: [2, 204, -30, 204, 204, 204, 204, 27, 27, 12], 2247: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2248: [2, 204, 204, 204, 204, 204, 0, 27, 27, 12], 2249: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2250: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2251: [2, 204, 204, 204, 24, 204, 204, 27, 27, 12], 2252: [2, 204, -24, 204, 204, 204, 0, 27, 27, 12], 2253: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2254: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2255: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2256: [2, 204, 204, 204, 30, 204, 204, 27, 27, 12], 2257: [2, 204, 204, 204, 204, 204, 6, 27, 27, 12], 2258: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2259: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2300: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2301: [2, 204, 204, 204, 36, 204, 204, 27, 27, 12], 2302: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2303: [2, 204, 204, 204, -36, 204, 12, 27, 27, 12], 2304: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2305: [2, 204, -12, 204, 204, 204, 204, 27, 27, 12], 2306: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2307: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2308: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2309: [2, 204, 204, 204, -30, 204, 204, 27, 27, 12], 2310: [2, 204, -6, 204, 204, 204, 204, 27, 27, 12], 2311: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2312: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2313: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2314: [2, 204, 0, 204, 204, 204, 204, 27, 27, 12], 2315: [2, 204, 204, 204, 204, 204, 24, 27, 27, 12], 2316: [2, 204, 204, 204, -24, 204, 204, 27, 27, 12], 2317: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2318: [2, 204, 0, 204, 204, 204, 204, 27, 27, 12], 2319: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2320: [2, 204, 204, 204, 204, 204, 30, 27, 27, 12], 2321: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2322: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2323: [2, 204, 6, 204, 204, 204, 204, 27, 27, 12], 2324: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2325: [2, 204, 204, 204, 204, 204, 36, 27, 27, 12], 2326: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2327: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2328: [2, 204, 204, 204, -12, 204, 204, 27, 27, 12], 2329: [2, 204, 12, 204, 204, 204, 204, 27, 27, 12], 2330: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2331: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2332: [2, 204, 204, 204, 204, 204, -36, 27, 27, 12], 2333: [2, 204, 204, 204, -6, 204, 204, 27, 27, 12], 2334: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2335: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2336: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2337: [2, 204, 204, 204, 204, 204, -30, 27, 27, 12], 2338: [2, 204, 204, 204, 0, 204, 204, 27, 27, 12], 2339: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2340: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2341: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2342: [2, 204, 24, 204, 204, 204, 204, 27, 27, 12], 2343: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2344: [2, 204, 204, 204, 204, 204, -24, 27, 27, 12], 2345: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2346: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2347: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2348: [2, 204, 30, 204, 204, 204, 204, 27, 27, 12], 2349: [2, 204, 204, 204, 0, 204, 204, 27, 27, 12], 2350: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2351: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2352: [2, 204, 36, 204, 204, 204, 204, 27, 27, 12], 2353: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2354: [2, 204, 204, 204, 6, 204, 204, 27, 27, 12], 2355: [2, 204, -36, 204, 204, 204, -12, 27, 27, 12], 2356: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2357: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2358: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2359: [2, 204, 204, 204, 12, 204, 204, 27, 27, 12], 0: [2, 204, -30, 204, 204, 204, 204, 27, 27, 12], 1: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 2: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 3: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 4: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 5: [2, 204, -24, 204, 204, 204, 204, 27, 27, 12], 6: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 7: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 8: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 9: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12], 10: [2, 204, 204, 204, 204, 204, 204, 27, 27, 12]}


def jumpState():
    global unyouDnmList
    nowHourDef()
    unyouDnmList = eval('stateDict' +str(honsen)).get(nowHour)
    print(str(unyouDnmList) + 'jumpState')

def jump_state_minute():
    global unyouDnmList
    attracted_minute_list = []
    attracted_minute_list = eval('every_min_dict').get(eval(str(int(ddn.strftime('%H%M')))))
    print(ddn)
    for i,(a,d) in enumerate(zip(attracted_minute_list, unyouDnmList)):
        if a == 204:
            unyouDnmList[i] = d + 1
        else:
            unyouDnmList[i] = a
    print(str(unyouDnmList) + 'jump_state_minute')


def add1min():
    global unyouDnmList
    global kmkrPltf
    for i, fig in enumerate(unyouDnmList):
        if 1 <= i <= honsen:
            if honsen == 6:
                if fig < 36:
                    fig += 1
                else:
                    fig = fig*(-1)+1
            else: #honsen = 7
                if fig == 42:
                    fig = fig*(-1)+1
                elif fig == -36:
                    if kmkrPltf == 3:
                        kmkrPltf = 4
                    else:
                        kmkrPltf = 3
                    fig += 1
                else:
                    fig += 1

        unyouDnmList[i] = fig
#unyouDnmList = [i+1 if i < 36 else i*(-1)+1 for i in unyouDnmList]



# <繰り返しはここら辺で実装>
# 駆動用
#@scdl.scheduled_job('interval',minutes=1)
def timed_job():
    #nowMinDef()
    #nowHourDef()
    global nowHour
    global nowMin

    if 7 <= nowHour <= 20:
        if nowMin != 0:
            add1min()
        else:
            jumpState()
    elif 5 <= nowHour <= 6:
        jump_state_minute()
    elif 21 <= nowHour <= 23:
        jump_state_minute()

    w.coords(un1d, iti(1), umiYma(1))
    w.coords(un2d, iti(2), umiYma(2))
    w.coords(un3d, iti(3), umiYma(3))
    w.coords(un4d, iti(4), umiYma(4))
    w.coords(un5d, iti(5), umiYma(5))
    w.coords(un6d, iti(6), umiYma(6))
    if honsen == 7:
        w.coords(un7d, iti(7), umiYma(7))

    w.coords(loz1, iti(1), wMid,  iti(1)-7, loz(1,4),  iti(1), loz(1,8),  iti(1)+7, loz(1,4))
    w.coords(loz2, iti(2), wMid,  iti(2)-7, loz(2,4),  iti(2), loz(2,8),  iti(2)+7, loz(2,4))
    w.coords(loz3, iti(3), wMid,  iti(3)-7, loz(3,4),  iti(3), loz(3,8),  iti(3)+7, loz(3,4))
    w.coords(loz4, iti(4), wMid,  iti(4)-7, loz(4,4),  iti(4), loz(4,8),  iti(4)+7, loz(4,4))
    w.coords(loz5, iti(5), wMid,  iti(5)-7, loz(5,4),  iti(5), loz(5,8),  iti(5)+7, loz(5,4))
    w.coords(loz6, iti(6), wMid,  iti(6)-7, loz(6,4),  iti(6), loz(6,8),  iti(6)+7, loz(6,4))
    if honsen == 7:
        w.coords(loz7, iti(7), wMid,  iti(7)-7, loz(7,4),  iti(7), loz(7,8),  iti(7)+7, loz(7,4))

    w.delete("oval")
    now_text = str(nowHour) +':' +str(nowMin)
    w.create_text(400, 400, text=now_text, tag="oval")
    # テスト
    nowMin += 1
    #ddn +=1
    w.after(600, timed_job)


# <ここから処理を起動しはじめるゾーン>
#起動時の処理 (とスケジューラーの起動:今使ってない)
if 7 <= nowHour <= 20:
    jumpState()
    for i in range(nowMin):
        add1min()
    print(str(unyouDnmList) + "now;init")
elif  5 <= nowHour <= 6:
    jump_state_minute()
elif 21 <= nowHour <= 23:
    jump_state_minute()

fromBucketToUnyounum()
fromBucketToYasumi()


#if __name__ == "__main__":
#scdl.start()



# <ほとんどおまけの描画処理>
#描画処理
root = tk.Tk()
root.title(u"here is title")
root.geometry("800x450")
#座標群
wWidth = 800
wHeight = wWidth / 16 * 9  #450
wMid = wHeight / 2  #225
lLeng = 36 * 20  #720
lSX = (wWidth - lLeng ) / 2  #40
lSY = wMid  #225
lEX = wWidth - lSX  #760
lEY = wMid  #225

w = tk.Canvas(root, width=wWidth,  height=wHeight)
# 背景
w.create_line(lSX, lSY, lEX, lEY, fill="#111111")
def base(num):
    return int(num) * 20 + lSX

terminal = [0,36]
for i in terminal:
    w.create_rectangle(base(i)-5, wMid-4, base(i)+5, wMid+4,  fill = 'white', stipple = 'gray25')
double = [6, 12, 18, 24, 30]
for i in double:
    w.create_oval(base(i)-4, wMid-4, base(i)+4, wMid+4,  fill = 'white', stipple = 'gray25')
single = [2, 4, 9, 14, 16, 21, 27, 32, 34]
for i in single:
    w.create_line(base(i), wMid-4, base(i), wMid+4)
# 背景おまけ
w.create_oval(100, 450-200, 700, 450+200,  fill = 'lightsteelblue1', outline = 'steelblue4')
w.create_oval(280-30, 310-25, 280+30, 310+25,  fill = 'DarkOliveGreen2', outline = 'tan4')

# 列車
def iti(i):
    eki_abs = 0
    if abs(unyouDnmList[i-1+1]) > 36:
        eki_abs = 36 * 20 + lSX
    else:
        eki_abs = abs(unyouDnmList[i-1+1]) * 20 + lSX
    return eki_abs

def umiYma(i):
    yama = wMid-12
    umi = wMid+12
    if abs(unyouDnmList[i-1+1]) >= 36:
        if unyouDnmList[i-1+1] == 36:
            if kmkrPltf == 3:
                return yama
            else:
                return umi
        else: #36以外
            if kmkrPltf == 3:
                return umi
            else:
                return yama
    else:
        if unyouDnmList[i-1+1] < 0:
            return umi
        else: # unyouDnmList[i-1+1] < 0
            return yama

un1d = w.create_text(iti(1), umiYma(1), text=un1)
un2d = w.create_text(iti(2), umiYma(2), text=un2)
un3d = w.create_text(iti(3), umiYma(3), text=un3)
un4d = w.create_text(iti(4), umiYma(4), text=un4)
un5d = w.create_text(iti(5), umiYma(5), text=un5)
un6d = w.create_text(iti(6), umiYma(6), text=un6)
if honsen == 7:
    un7d = w.create_text(iti(7), umiYma(7), text=un7)

iro =['white', 'orange', 'chartreuse3', 'red', 'purple', 'pink', 'SkyBlue1', 'violet']
def loz(i,num):
    if umiYma(i) - wMid > 0:
        return wMid + num
    else:
        return wMid - num
def createLoz(i):
    return w.create_polygon(iti(i), wMid,  iti(i)-7, loz(i,4),  iti(i), loz(i,8),  iti(i)+7, loz(i,4), fill=iro[i-1+1], outline='gray')
loz1 = createLoz(1)
loz2 = createLoz(2)
loz3 = createLoz(3)
loz4 = createLoz(4)
loz5 = createLoz(5)
loz6 = createLoz(6)
if honsen ==7:
    loz7 = createLoz(7)


w.place(x=0, y=0)

timed_job()
#ここまで描画処理
# <この子が延々の繰り返しを起動する>
root.mainloop()



# <あると便利な早見表>
# 資料
ekidictA = {'01':'藤沢', '02':'石上', '03':'柳小路', '04':'鵠沼', '05':'湘南海岸公園', '06':'江ノ島', '07':'腰越', '08':'鎌倉高校前', '09':'七里ヶ浜', '10':'稲村ヶ崎', '11':'極楽寺', '12':'長谷', '13':'由比ヶ浜', '14':'和田塚', '15':'鎌倉'}

ekiDictB = {0:'藤沢', 2:'石上', 4:'柳小路', 6:'鵠沼', 9:'湘南海岸公園', 12:'江ノ島', 14:'腰越', 16:'鎌倉高校前', 18:'峰ヶ原', 21:'七里ヶ浜', 24:'稲村ヶ崎', 27:'極楽寺', 30:'長谷', 32:'由比ヶ浜', 34:'和田塚', 36:'鎌倉'}

ekiDictC = {'fu':0, 'ku':6, 'en':12, 'mi':18, 'in':24, 'ha':30, 'ka':36}

ekiDictD = {0:'藤沢', 1:'石上', 2:'柳小路', 3:'鵠沼', 4:'湘南海岸公園', 5:'江ノ島', 6:'腰越', 7:'鎌倉高校前', 8:'峰ヶ原', 9:'七里ヶ浜', 10:'稲村ヶ崎', 11:'極楽寺', 12:'長谷', 13:'由比ヶ浜', 14:'和田塚', 15:'鎌倉'}

ekiDictE = {0:0, 1:2, 2:4, 3:6, 4:9, 5:12, 6:14, 7:16, 8:18, 9:21, 10:24, 11:27, 12:30, 13:32, 14:34, 15:36}

ekiDictF = {-15:[-36,-36], -14:[-35,-35], -13:[-33,-33], -12:[-31,-31], -11:[-29,-29], -10:[-26,-25], -9:[-22,-22], -8:[-20,-19], -7:[-18,-18], -6:[-16,-16], -5:[-13,-12], -4:[-11,-11], -3:[-8,-7], -2:[-6,-6], -1:[-4,-4], 0:[-2,0], 1:[1,1], 2:[3,3], 3:[5,5], 4:[8,8], 5:[9,11], 6:[13,13], 7:[15,15], 8:[17,17], 9:[18,18], 10:[22,24], 11:[26,26], 12:[28,29], 13:[30,30], 14:[32,32], 15:[34,36]}

cars = [305, 1001, 1002, 1101, 1201, 1501, 1502, 2001, 2002, 2003, 10, 21, 22, 501, 502]

paternDiya = '0617->2135'

jikokuhyo = 'http://enoden.wiki.fc2.com/wiki/時刻表'
